@extends ('gumby-layout')

@section('content')
<div class="row">
    <h1 class="lead">インスタントLaravel</h1>
</div>
<div class="row">
    <div class="centered ten colums">
        <h3>チュートリアル専用、使い捨てインスタントLaravel環境。</h3>
    </div>
</div>
<div class="row">
    <div class="five colums centered">
        <img src="{{ asset('/img/InstantLaravel.png') }}" alt="Instant Laravel">
    </div>
</div>
<div class="row">
    <div class="nine columns centered"
         <p>「都会から遠い。準備が面倒。移動に時間が…参加費も必要…、でもオンラインなら！」</p>
    </div>
</div>
<div class="row">
    <li class="info alert"><i class="icon-book-open"></i> 只今、ベータテスト開放中！ベータなので毎日数時間運転中、その都度作り替えています！</li>
</div>
<hr>
<div class="row">
    <a name="logform"></a>
    <h3>新規ユーザー登録</h3>
</div>
<div class="row">
    {{ Form::open() }}
    <div class="centered nine columns">
        @if ($message)
        <div class="row">
            <li class="danger alert"><i class="icon-alert"></i> {{ $message }}</li>
        </div>
        @endif
        @if ($errors->has('username'))
        <div class="row">
            <li class="primary alert">{{ $errors->first( 'username' ) }}</li>
        </div>
        @endif
        <div class="row">
            <div class="six columns">
                <p>区別のつけやすいアルファベットのユーザー名：</p>
            </div>
            <div class="six columns">

                    {{ Form::text('username', Input::old('username', '') ) }}

            </div>
        </div>
    </div>
    <div class="centered nine columns">
        @if ($errors->has('password'))
        <div class="row">
            <li class="primary alert">{{ $errors->first( 'password' ) }}</li>
        </div>
        @endif
        <div class="row">
            <div class="six columns">
                {{ Form::label('password', '覚えやすいパスワード：') }}
            </div>
            <div class="six columns">

                    {{ Form::password('password', [ 'class'=>'six colums'] ) }}

            </div>
        </div>
    </div>
    <div class="row">
        <div class="centered two columns">
            {{ Form::submit(' 参加する ') }}
        </div>
    </div>
    {{ Form::close() }}
</div>
<div class="row">
    <ul class="disc">
        <li>オンラインチュートリアルにお手軽に参加して頂くためのシステムです。（秘密ですがLaravel以外も用意できます。;D）</li>
        <li>Laravelの準備を済ませ、ブラウザから使えるエディターを用意してあります。登録し、アクセスしてもらうだけで、すぐに参加できます。</li>
        <li>事前予約が必要か、チャットにどんなシステムを使用するかは、そのチュートリアル主催者により異なります。参加したいチュートリアルを見つけたら、事前にチェックしておきましょう。（デフォルトのチュートリアル構成では、チャットがエディターに組み込まれています。全く事前準備は必要ありません。）</li>
    </ul>
</div>
<hr>
<div class="row">
    <div class="twelve columns">
        <section class="vertical tabs">
            <ul class="tab-nav three columns">
                <li class="active"><a href="#tabs-top">スケジュール</a></li>
                <li><a href="#tabs-top">使い方</a></li>
                <li><a href="#tabs-top">主催方法</a></li>
            </ul>
            <a name="tabs-top"></a>
            <div class="tab-content nine columns active">
                <h4 class="lead">スケジュール</h4>
                <p>スケジュールのサンプルです。本物ではありません。</p>
                <table class="striped">
                    <thead>
                        <tr>
                            <th>開始日時</th>
                            <th>内容</th>
                            <th>主催</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>2014/07/15 18:00 (2h)</td>
                            <td>インスタントLaravelの元になっているCodiadの使用方法を学んでください。<br>事前準備は必要ありません。<br>開始時間３０分前から、<a href="#">regi.instantlaravel.com</a>で登録してください。登録情報はチュートリアル終了時、即座に破棄されます。</td>
                            <td>HiroKws</td>
                        </tr>
                        <tr>
                            <td>2014/07/17 18:00 (5h)</td>
                            <td>テーマを決めず、ご質問にLaravel答えるマンがお答えします。<br>事前準備は必要ありません。<br>開始時間３０分前から、<a href="#">regi.instantlaravel.com</a>で登録してください。登録情報はチュートリアル終了時、即座に破棄されます。</td>
                            <td>Laravel答えるマン</td>
                        </tr>
                        <tr>
                            <td>2014/07/30 7:00 (24h)</td>
                            <td>ハッカソンです。堅牢な銀行オンラインシステムの構築を目指します。<br>hackathon.instantlaravel.comで事前登録してください。先着３０名様まで参加可能です。<br>開始直前に、登録者にはサーバーのIPアドレスとSSHの接続情報をお送りいたします。作業は各自のPCからお好きな環境で行ってください。<br>チャットはLarachat（架空）を使用します。事前に準備をお願いします。</td>
                            <td>Sanwa</td>                        </tr>
                        <tr>
                            <td>2014/08/01 9:00 (12h)</td>
                            <td>自習時間です。デフォルト環境を建てておきますので、お好きに使用してください。<br>ただし、セキュリティー漏れをつつかないようにお願いします。:D</td>
                            <td>HiroKws</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="tab-content nine columns">
                <h4 class="lead">使い方</h4>
                <p>ここではデフォルト環境について説明します。主催者により用意する環境は異なります。</p>
                <li class="danger alert"><i class="icon-alert"></i> 只今エディターで、日本語の文字列を含んだファイルの保存が不安定です。MacやWindowsのブラウザからの使用には問題が無いようです。それ以外のLinuxなどの環境のブラウザからのアクセスでは、Javascriptの動作が異なるらしく、正しく保存されないようです。</li>
                <p>その1.登録してください。ユーザー名とパスワードだけです。</p>
                <p>その2.エディターのログイン画面になります。右下の"More"をクリックしますと、"Language"から「日本語」が選択できます。ログイン後のUIが日本語になります。</p>
                <p>その3.ログインしてください。</p>
                <p>その4.チュートリアルやハンズオンの内容に合わせ、コードを修正しましょう。</p>
                <p>その5.内容の確認は、"check.instantlaravel.com/ユーザー名"で行えます。</p>
                <p>その6.下部と右サイドのナビの「設定」から、エディターの設定が行えます。</p>
                <p>その7.右サイドナビの「端末」から、一部のコマンドが実行できます。</p>
                <p>その8.右サイドナビの"Toogle Together"で、参加者とチャットができます。</p>
                <p>その9.右サイドナビの"CodeSetting"で、キーバインドを変更できます。</p>
            </div>
            <div class="tab-content nine columns">
                <p>当サイトは、オンラインチュートリアル／ハンズオンイベントのハブサイトです。Laravelに関するオンラインチュートリアルなどのイベントを告知します。予定をお持ちの方はご連絡ください。掲載いたします(hirokws@gmail.com)</p>
                <p>また、ご依頼いただけば、イベントの開催中サブドメインを提供します。（指定していただいた時間に、指定のIPアドレスとサブドメインを登録します。当初は手動で設定します。DNSとしてCloudFlareを使用しています。）</p>
                <h4 class="lead">主催方法の流れ</h4>
                <ol>
                    <li>テーマ、日時が決まったら、hirokws@gmail.comへ連絡。</li>
                    <li>事前予約を必要にする場合、登録システムを作成し、募集する。</li>
                    <li>チュートリアル／ハンズオン環境をVPSで作成する。</li>
                    <li>イベント開始！</li>
                    <li>終了したら、VPSを削除する。</li>
                </ol>
                <h4 class="lead">主催方法</h4>
                <h5>環境（サーバー）</h5>
                <p>チュートリアルの環境（サーバー）は、主催者が用意してください。短時間のチュートリアルには、時間単位で利用できるAWS、DigitalOcean、Linodeなどのサービスが便利に利用でき、料金もさほどかかりません。全サービスともクラウドサーバーの大きさを切り換えられますので、準備中は小さなサイズのサーバーを使用し、イベント中は適切な大きさのサーバーを利用することができます。</p>
                <p>環境の準備に時間がかかる場合は、DigitalOceanをおすすめします。ドロップレットを停止し、スナップショットを取り、その後ドロップレットを破棄すれば、費用がかからなくなります。スナップショットの保存は現在課金されていません。保管しているスナップショットから、作業の続きが行えます。数日に渡り、少しずつ環境を整えたい場合などに便利に使用できます。</p>
                <p>プロビジョニングシェルを流して生成される、デフォルトの環境をほぼそのまま使用する場合であれば、Linodeをおすすめします。同じスペックでも他のクラウドサービスより、内部の処理スピードが早いでし、東京にサーバーがあります。アウトの出力回線帯幅の制限がやや細いですが、短期のチュートリアルでは問題にならないでしょう。</p>
                <p>チュートリアル／ハンズオンを数日などに渡り開催する場合は、AWSをおすすめします。大手だけあり、DDos攻撃などは上流回線で対処してくれるようです。</p>
                <p>コードを編集し、結果を確認するチュートリアル程度であれば、さほど能力を上げる必要はないと思われます。もし、Composerを使って外部パッケージを追加するようなハンズオンを提供するのであれば、かなりメモリも食いますので、スペックは高くしておく必要があるでしょう。基本的にどの程度のスペックが必要かは参加人数によりますので、予測しましょう。</p>
                <h5>デフォルト環境</h5>
                <p>デフォルト環境を準備するシェル（Ubuntu14.04サーバー向け）を用意します。もちろん、使用してもかまいませんし、使用せず独自の環境を提供してもかまいません。Web上のIDEサービスを利用してもかまいません。開催告知の中でその旨を参加希望者にどのような形態でイベントを実施するのか、伝えてください。</p>
                 <p>エディター機能には、オンラインエディターのCodiadを使用しています。操作に関わる部分は、ほとんど日本語化してあります。英語が苦手な方でも大丈夫です。</p>
               <p>デフォルト環境は、Codiadの機能を元に構築しているため、セキュリティー的に完璧ではありません。「チュートリアルは無料で数時間のものであるので、参加者が悪事を働いたり、外部から攻撃を受け継続できない場合は、中止でかまわないだろう。」という考えです。もちろん、参加希望者には事前に了承してもらいましょう。</p>
                <p>よりセキュアに運営するために、事前の申し込み制にしたり、招待制にしたりと運用で工夫することもできるでしょう。もしくはデフォルト環境設定スクリプトを改良したり、自分で初めからよりセキュアに環境を構築することもできるでしょう。開催者の方のお好みです。</p>
                <p>"base"ユーザーがCodiadの管理者権限を持っています。ログインし、「マーケットプレス」から必要な拡張機能をインストールしてください。（初回インストール時は処理が戻ってこないことが多いようです。しばらく待って戻ってこないようでしたら、一度ウィンドウを閉じ、再度開いてみるとインストールされていることが多いです。ただ、プラグインによっては、正しく動作していないものもあり、インストールできないものもあります。）
                <p>Codiadでは通常workspaceディレクトリーにプロジェクトごとのディレクトリーを作成します。他にプロジェクトディレクトリーの位置を絶対パスで指定することもできますが、この場合、編集結果をダウンロードできません。（仕様のようです。絶対パスプロジェクトを作成するとき、確認ダイアログが表示されますが、こうした制限があることは表示されないため、とても分かりづらい仕様です。）</p>
                <h5>余りセキュアではない環境を使用することについて</h5>
                <p>結局、「数時間の無料チュートリアルイベントにどの程度手間をかけるか？」、「どの程度、セキュアーにするか？」などを考慮し、トレードオフで結論を出しました。個人情報を保持せず、チュートリアルの間、数時間だけ動作させ、その後は破棄する環境ですから、完全にセキュアにする必要はないと思います。とは言え、現状はやや物足りません。ですから、多少時間のかかるチュートリアルイベントであれば、攻撃にさらされる可能性も上がりますので、事前登録制にし、チュートリアル中は80番ポートしか開かないようにするなど、運用でカバーするしかないでしょう。デフォルト環境の次期バージョンでは、登録者をOSにユーザーとして登録し、ファイルパーミッションの指定により、多少セキュアにしようと考えています。
                <h5>デフォルト環境の不具合</h5>
                <p>Codiadは、修正の保存時に、本文まるごとではなく、修正前の差分をサーバーへ送るようになっています。参加者がMac環境であれば多分問題は起きません。Windowsでも大丈夫でしょう。参加者がLinuxを使用している場合、日本語を含んだテキストを保存しようとすると、そのdiff結果の行数がずれてしまうようです。そのため、保存したメッセージが表示されているにもかかわらず、実際には保存されていなかったり、とんでもない場所が書き換わったりしています。作者のローカル環境がMacで、問題が起きないようですので、GitHubでIsssueを出していますが、解決しようがないようです。（原因を突き止め、修正できる人がいるのなら、プルリクエストをお願いします。）</p>
                <h5>デフォルト環境セットアップシェル</h5>
                <p>Githubで公開しています。<a href="https://github.com/InstantLaravel/InstantLaravel">InstantLaravel/InstantLaravel</a>です。</p>
                <p>Unutu14.04環境上に構築しますので、PHPバージョン5.5です。WebサーバーはNginxです。</p>
                <p>スクリプトの前半部分が設定項目になっています。登録、エディター、結果の確認に使用するドメインを指定してください。"base"という名前のユーザーが管理ユーザーになります。パスワードを指定してください。</p>
                <p>後は起動したUbuntu14.04の環境でルートユーザーになり、シェルで流してください。例えば：</p>
                <p><pre><code>base -v ubuntu-provisioning.sh</code></pre></p>
                <p>Vagrantを使いローカルで試すこともできます。</p>
                <p>準備が整ったら、エディターのCodiadにアクセスし、"base"ユーザーとしてログインしてください。右ナビの「マーケットプレース」でお好みのプラグインをインストールしてください。インストールした拡張は、全参加ユーザーも利用できます。（プラグインのインストールは、マーケットプレースで行う必要があり、今のところ自動化できていません。）</p>
                <p>チュートリアルデフォルト環境として、お勧めするのは"Together"と"Jaild-Terminal"です。</p>
                <p>Togetherはチャットをサポートしてくれます。外部チャットを使用する必要がありません。Toogle Togetherを利用しているプラグインのようです。そのため、ベータのようですが音声チャットもサポートされています。このプラグインは、メニューに存在します。インストールを選択してください。</p>
                <p>"Jaild-Terminal"は、オリジナルの"Terminal"プラグインを改良したものです。cdコマンドによる移動の制限、使用コマンドのホワイトリスト指定、エイリアスの登録機能などを追加しています。また、UIを日本語に変更しています。このプラグインは、公式ではないためインストールするには、マーケットプレースの一番下にあるテキストエリアに"https://github.com/InstantLaravel/Codiad-Jailed-Terminal.git"を指定し、右横の"Install Manually"ボタンをクリックしてください。</p>
                <p>後は、参加者に利用させるLaravelの（もしくは他のPHPフレームワークの環境を整えましょう。"/home/codiad/workspace/base"下が"base"ユーザーの環境です。これに必要リソースを追加してください。新規ユーザーを登録する際、この環境がその新しいユーザーのためにコピーされます。</p>
                <p>Codiad自身はオンラインユーザー登録をサポートしていません。管理者が追加作業を行うスタイルです。そのため、トップページ（ユーザー登録）で追加処理を行い、Codiadはエディター部分を担当させています。（本当は、連携させたいのですが、うまく行きませんでした。）</p>
                <p>事前登録制にするとか、メールアドレスの承認を必要にするとかのワークフローにするためには、トップページを改良するか、参考にして独自に作成してください。トップページ自身は、GitHubの<a href="https://github.com/InstantLaravel/TopPage">InstantLaravel/TopPage</a>で公開しています。routes.phpに全ロジックを書いた、フットコントローラーですので、理解はさほど面倒ではありません。（本来新規登録だけで、認証は必要ないのですが、将来Codiadと認証を連携させるときのために残しています。）ユーザーの作成から環境のセットアップはルートユーザーで実行する必要があるため、別シェルに用意し、それをsudoで実行しています。</p>
                <p>ユーザー周りの管理が多少ややこしいのですが、結果を確認するためのWebアクセスは、PHP-FPMの指定で各ユーザー権限としてアクセスさせるためです。suExecをNginxで動作させる方法を探るほうが、簡単になるかも知れません。suExecは遅いようですので、Nginxで使用できるのだとしても、今回はPHP−FPMで頑張ってみました。</p>
                <p>名前付けと管理が簡単のため、ポート分けではなく、ソケットファイルを利用しています。</p>
                <p>PHP-FPMでユーザーごとの動作環境を用意するということは、ユーザー分のメモリを必要とするということです。大人数のユーザーを登録すれば、メモリはその分消費されます。（現状のPHP-FPMの設定は、一般サイトのアクセスを前提としているものをそのまま使用していますが、各ユーザーの確認ページには、それほど多いアクセスはないでしょうから、ワーカーを１つに落としても問題ないかと思います。）</p>
                <p>確認時のPHP−FPMを同一動作ユーザーで行うと、他の参加者の環境へPHPから簡単にアクセスできてしまうため、最低限度のセキュリティーとして動作ユーザーを分けることが必要となりました。それでもセキュリティー的には完璧ではないでしょう。そのため、現在のWeb IDE環境サービスは、各プロジェクトごとにVPSを建てるのが主流なのでしょう。近い将来はDockerに移行するでしょうが、Dockerは今のところセキュリティー面が弱いらしく、それを強化するのがノウハウとしてビジネスになっているようです。</p>
            </div>
        </section>
    </div>
    @stop
